import sqlite3

from src.config import DIR
from bin.strings import get_now_date

DATABASE = f"{DIR}/shopDB.sqlite"


def connect_db():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    :return:
    """
    return sqlite3.connect(DATABASE)


def open_db():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cur.execute("CREATE TABLE IF NOT EXISTS UserList ("
                    "user_id INT,"
                    "username TEXT,"
                    "firstName TEXT,"
                    "lastName TEXT,"
                    "balance REAL,"
                    "inviting INT,"
                    "regDate TEXT)")

        # –û–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        cur.execute("CREATE TABLE IF NOT EXISTS Support ("
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    "user_id INT,"
                    "message TEXT,"
                    "type INT,"
                    "state INT,"
                    "answer TEXT,"
                    "date TEXT,"
                    "FOREIGN KEY (user_id) references UserList(user_id),"
                    "FOREIGN KEY (type) references SupportTypes(id))")

        # –¢–∏–ø—ã –æ–±—Ä–∞—â–µ–Ω–∏–π
        cur.execute("CREATE TABLE IF NOT EXISTS SupportTypes ("
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    "name TEXT)")

        # –ó–∞–ø–∏—Å—å —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π
        if len(cur.execute("SELECT * FROM SupportTypes").fetchall()) == 0:
            types = [("‚ùì –í–æ–ø—Ä–æ—Å",), ("üí≥ –û–ø–ª–∞—Ç–∞",), ("üìö –¢–æ–≤–∞—Ä—ã",), ("üìù –ü—Ä–æ—á–µ–µ",)]
            cur.executemany("INSERT INTO SupportTypes (name) VALUES (?)", types)

        # –õ–∏—Å—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        cur.execute("CREATE TABLE IF NOT EXISTS ItemList ("
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    "name TEXT, "
                    "desc TEXT, "
                    "pic TEXT, "
                    "price INT, "
                    "category INT, "
                    "subcategory INT, "
                    "FOREIGN KEY (category) references Category(id), "
                    "FOREIGN KEY (subcategory) references Subcategory(id))")

        # –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
        cur.execute("CREATE TABLE IF NOT EXISTS Items ("
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    "item_id INT, "
                    "data TEXT, "
                    "FOREIGN KEY (item_id) references ItemList(id) )")

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        cur.execute("CREATE TABLE IF NOT EXISTS Category ("
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    "name TEXT)")

        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cur.execute("CREATE TABLE IF NOT EXISTS Subcategory ("
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    "name TEXT, "
                    "category_id INT, "
                    "FOREIGN KEY (category_id) references Category(id))")

        # –ü–æ–∫—É–ø–∫–∏
        cur.execute("CREATE TABLE IF NOT EXISTS Sales ("
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    "user_id INT, "
                    "item_name TEXT, "
                    "amount INT, "
                    "count INT, "
                    "date TEXT, "
                    "cheque TEXT, "
                    "FOREIGN KEY (user_id) references UserList(user_id))")

        # –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        cur.execute("CREATE TABLE IF NOT EXISTS SoldItems ("
                    "sale_id INT,"
                    "item_data TEXT,"
                    "FOREIGN KEY (sale_id) references Sales(id))")

        # QIWI
        cur.execute("CREATE TABLE IF NOT EXISTS Qiwi ("
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    "num TEXT,"
                    "token TEXT,"
                    "nickname TEXT)")

        if len(cur.execute("SELECT * FROM Qiwi").fetchall()) == 0:
            cur.execute("INSERT INTO Qiwi (num, token, nickname) VALUES (?, ?, ?)",
                        ("num", "token", "nickname"))

        # YooMoney
        cur.execute("CREATE TABLE IF NOT EXISTS YooMoney ("
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    "num TEXT,"
                    "token TEXT)")

        if len(cur.execute("SELECT * FROM YooMoney").fetchall()) == 0:
            cur.execute("INSERT INTO YooMoney (num, token) VALUES (?, ?)",
                        ("num", "token"))

        # BTC Banker
        cur.execute("CREATE TABLE IF NOT EXISTS Banker ("
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    "api_id INT,"
                    "api_hash TEXT)")

        if len(cur.execute("SELECT * FROM Banker").fetchall()) == 0:
            cur.execute("INSERT INTO Banker (api_id, api_hash) VALUES (?, ?)",
                        (0, "token"))

        # –ü—Ä–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        cur.execute("CREATE TABLE IF NOT EXISTS Params ("
                    "key TEXT,"
                    "value TEXT)")

        if len(cur.execute("SELECT * FROM Params").fetchall()) == 0:
            param_list = [
                ("faq", "üìã –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å FAQ –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞\n\n<i>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –ë–æ–∂–µ–Ω—å–∫–æ–π</i>"),
                ("rules", "üìó –ó–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞\n\n<i>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –ë–æ–∂–µ–Ω—å–∫–æ–π</i>"),
                ("hello_message", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}"),
                ("comeback_message", "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, @{username}"),
                ("qiwi_payment", "number")
            ]

            cur.executemany("INSERT INTO Params (key, value) VALUES (?, ?)", param_list)


# –ó–∞–ø—Ä–æ—Å—ã –∫ –ë–î

# # # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ # # #

def add_user(user_id, username, first_name, last_name, inviting):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ—è

    :param user_id: id —é–∑–µ—Ä–∞
    :param username: –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param first_name:
    :param last_name:
    :param inviting: id –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: true - —é–∑–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω, false - —é–∑–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    with connect_db() as db:
        cur = db.cursor()

        user = cur.execute("SELECT * FROM UserList WHERE user_id = ?", [user_id]).fetchall()

        if len(user) == 0:
            cur.execute("INSERT INTO UserList (user_id, username, "
                        "firstName, lastName, balance, inviting, regDate) VALUES (?, ?, ?, ?, ?, ?, ?)",
                        [user_id, username, first_name, last_name, 0, inviting, get_now_date()])
            return True
        else:
            update_user(user_id, username, first_name, last_name)
            return False


def get_user(user):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param user:
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        if str(user).startswith("@"):
            return cur.execute("SELECT * FROM UserList WHERE username = ?", [user.split("@")[1]]).fetchone()
        else:
            return cur.execute("SELECT * FROM UserList WHERE user_id = ?", [user]).fetchone()


def get_daily_users(date):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å

    :param date: –¥–∞—Ç–∞
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute(f"SELECT * FROM UserList WHERE regDate LIKE '%{date}%'").fetchall()


def update_user(user_id, username, first_name, last_name):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    :param user_id:
    :param username:
    :param first_name:
    :param last_name:
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("UPDATE UserList SET username = ?, firstName = ?, lastName = ?"
                    " WHERE user_id = ?", [username, first_name, last_name, user_id])


def set_user_balance(user_id, amount):
    """
    –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

    :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param amount: —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("UPDATE UserList SET balance = ? WHERE user_id = ?", [amount, user_id])


def get_user_balance(user):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param user: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM UserList WHERE user_id = ?", [user]).fetchone()[4]


def get_all_users():
    """
    –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–∞–≥–∞–∑–∏–Ω–∞

    :return: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM UserList").fetchall()


# # # –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ # # #

def add_buy(purchase_data):
    """
    –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏

    :param purchase_data: –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("INSERT INTO Sales (user_id, item_name, amount, count, date, cheque) VALUES (?, ?, ?, ?, ?, ?)",
                    (purchase_data['user_id'], purchase_data['item_name'], purchase_data['amount'],
                     purchase_data['count'], purchase_data['date'], purchase_data['cheque']))

        return cur.execute("SELECT * FROM Sales WHERE cheque = ?", [purchase_data['cheque']]).fetchone()[0]


def add_sold_item_data(sale_id, item_data):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ

    :param sale_id: id –ø—Ä–æ–¥–∞–∂–∏
    :param item_data: –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()

        for item in item_data:
            cur.execute("INSERT INTO SoldItems (sale_id, item_data) VALUES (?, ?)", (sale_id, item[2]))


def old_sold_buy(sale_id, item_data):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –ø–æ–∫—É–ø–∫–∏

    :param sale_id: id –ø—Ä–æ–¥–∞–∂–∏
    :param item_data: –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()

        cur.execute("INSERT INTO SoldItems (sale_id, item_data) VALUES (?, ?)",
                    (sale_id, item_data))


def get_user_buy(user_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Sales WHERE user_id = ?", [user_id]).fetchall()


def get_all_sales():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ

    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Sales").fetchall()


def get_daily_sales(date):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∑–∞ –¥–µ–Ω—å

    :param date: –¥–∞—Ç–∞
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute(f"SELECT * FROM Sales WHERE date LIKE '%{date}%'").fetchall()


# # # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ # # #

def get_categories():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Category").fetchall()


def get_category(category_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ id

    :param category_id: id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Category WHERE id = ?", [category_id]).fetchone()


def get_subcategories(category_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param category_id: id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Subcategory WHERE category_id = ?", [category_id]).fetchall()


def get_all_subcategories():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π

    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Subcategory").fetchall()


def add_categories(category_list):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    :param category_list: —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()

        for category in category_list:
            cur.execute("INSERT INTO Category (name) VALUES (?)", [category])


def add_category(category):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param category:
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("INSERT INTO Category (name) VALUES (?)", [category])


def add_subcategories(category_list, category_id):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π

    :param category_list: –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    :param category_id: id –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()

        for category in category_list:
            cur.execute("INSERT INTO Subcategory (name, category_id) VALUES (?, ?)",
                        (category, category_id))


def add_subcategory(category_name, category_id):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param category_name:
    :param category_id:
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("INSERT INTO Subcategory (name, category_id) VALUES (?, ?)",
                    (category_name, category_id))


def delete_category(category_id):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param category_id: id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("DELETE FROM ItemList WHERE category = ?", [category_id])
        cur.execute("DELETE FROM Subcategory WHERE category_id = ?", [category_id])
        cur.execute("DELETE FROM Category WHERE id = ?", [category_id])


def delete_subcategory(subcategory_id):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param subcategory_id: id –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("DELETE FROM ItemList WHERE subcategory = ?", [subcategory_id])
        cur.execute("DELETE FROM Subcategory WHERE id = ?", [subcategory_id])


# # # –¢–æ–≤–∞—Ä—ã # # #

def get_items_category(category_id, subcategory_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param category_id: id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param subcategory_id: id –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM ItemList WHERE category = ? AND subcategory = ?",
                           [category_id, subcategory_id]).fetchall()


def get_item(item_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ id

    :param item_id: id —Ç–æ–≤–∞—Ä–∞
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM ItemList WHERE id = ?", [item_id]).fetchone()


def get_item_count(item_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

    :param item_id: id —Ç–æ–≤–∞—Ä–∞
    :return: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    """
    with connect_db() as db:
        cur = db.cursor()
        return len(cur.execute("SELECT * FROM Items WHERE item_id = ?", [item_id]).fetchall())


def add_item(item):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

    :param item: –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    :return: —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    """
    with connect_db() as db:
        cur = db.cursor()

        cur.execute("INSERT INTO ItemList (name, desc, pic, price, category, subcategory) VALUES (?, ?, ?, ?, ?, ?)",
                    (item["name"], item["desc"], item["pic"],
                     item["price"], item["category"], item["subcategory"]))

        return cur.execute("SELECT * FROM ItemList WHERE name = ?", [item["name"]]).fetchone()


def delete_item(item_id):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

    :param item_id: id —Ç–æ–≤–∞—Ä–∞
    :return:
    """
    delete_all_item_data(item_id)

    with connect_db() as db:
        cur = db.cursor()
        cur.execute("DELETE FROM ItemList WHERE id = ?", [item_id])


# # # –ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ # # #

def add_item_data(item, item_data):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞

    :param item: –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    :param item_data: –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("INSERT INTO Items (item_id, data) VALUES (?, ?)",
                    (item["id"], item_data))


def get_all_item_data(item_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞

    :param item_id:
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()

        return cur.execute("SELECT * FROM Items WHERE item_id = ?", [item_id]).fetchall()


def get_item_data(item_id, count, if_delete):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ

    :param item_id: id —Ç–æ–≤–∞—Ä–∞
    :param count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    :param if_delete: true - –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    :return:
    """

    with connect_db() as db:
        cur = db.cursor()

        item_list = cur.execute("SELECT * FROM Items WHERE item_id = ?", [item_id]).fetchmany(count)

        if if_delete:
            # —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î
            for item in item_list:
                cur.execute("DELETE FROM Items WHERE id = ?", [item[0]])

    return item_list


def get_data(data_id):
    """
    –ü–æ–∑–∏—Ü–∏—è –ø–æ id

    :param data_id: id –ø–æ–∑–∏—Ü–∏–∏
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Items WHERE id = ?", [data_id]).fetchone()


def update_item_data(data_id, new_data):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ id

    :param data_id: id –ø–æ–∑–∏—Ü–∏–∏
    :param new_data: –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("UPDATE Items SET data = ? WHERE id = ?", [new_data, data_id])


def delete_all_item_data(item_id):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞

    :param item_id: id —Ç–æ–≤–∞—Ä–∞
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("DELETE FROM Items WHERE item_id = ?", [item_id])


def delete_item_data(data_id):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞

    :param data_id: id –ø–æ–∑–∏—Ü–∏–∏
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("DELETE FROM Items WHERE id = ?", [data_id])


# # # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–≤–∞—Ä–∞ # # #

def edit_item_param(item_id, param_name, param_value):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

    :param item_id: id —Ç–æ–≤–∞—Ä–∞
    :param param_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    :param param_value: –∑–Ω–∞—á–µ–Ω–∏–µ
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute(f"UPDATE ItemList SET {param_name} = ? WHERE id = ?", (param_value, item_id))

# # # –û–ø–ª–∞—Ç–∞ # # #

def get_qiwi():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ Qiwi –∫–æ—à–µ–ª—å–∫–∞

    :return: –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Qiwi").fetchone()


def edit_qiwi(qiwi_data):
    """
    –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ Qiwi –∫–æ—à–µ–ª—å–∫–µ

    :param qiwi_data: –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–µ–ª—å–∫–µ –≤ json
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("UPDATE Qiwi SET num = ? , token = ? , nickname = ? WHERE id = ?",
                    (qiwi_data['num'], qiwi_data['token'], qiwi_data['nickname'], 1))


def get_yoomoney():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ YooMoney

    :return: –¥–∞–Ω–Ω—ã–µ yoomoney
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM YooMoney").fetchone()


def edit_yoomoney(yoomoney_data: dict):
    """
    –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ YooMoney –∫–æ—à–µ–ª—å–∫–µ

    :param yoomoney_data: –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–µ–ª—å–∫–µ –≤ json
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("UPDATE YooMoney SET num = ? , token = ? WHERE id = ?",
                    (yoomoney_data['num'], yoomoney_data['token'], 1))


def get_banker():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ Banker

    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Banker").fetchone()


def edit_banker(banker_data: dict):
    """
    –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

    :param banker_data:
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("UPDATE Banker SET api_id = ? , api_hash = ? WHERE id = ?",
                    (banker_data['api_id'], banker_data['api_hash'], 1))


# # # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ # # #

def get_support_types():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤

    :return: –º–∞—Å—Å–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM SupportTypes").fetchall()


def get_support_type(id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ id

    :param id: id –∑–∞–ø—Ä–æ—Å–∞
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM SupportTypes WHERE id = ?", [id]).fetchone()


def register_support(data):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è

    :param data: –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤ JSON
    :return: id –æ–±—Ä–∞—â–µ–Ω–∏—è
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("INSERT INTO Support (user_id,  message, type, state, answer, date) "
                    "VALUES (?, ?, ?, ?, ?, ?)",
                    (data['user_id'], data['message'], data['type'], 0, "", get_now_date()))

        return cur.execute("SELECT * FROM Support WHERE user_id = ? AND message = ? AND type = ?",
                           (data['user_id'], data['message'], data['type'])).fetchone()[0]


def get_supports(state):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º

    :param state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ: 0 - –∞–∫—Ç–∏–≤–Ω–æ, 1 - –∑–∞–∫—Ä—ã—Ç–æ
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Support WHERE state = ?", [state]).fetchall()


def get_user_supports(user_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param user_id:
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Support WHERE user_id = ?", [user_id]).fetchall()


def get_support(id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞

    :param id: id –∑–∞–ø—Ä–æ—Å–∞
    :return: –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Support WHERE id = ?", [id]).fetchone()


def close_support(id, data):
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞

    :param id: id –∑–∞–ø—Ä–æ—Å–∞
    :param data: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("UPDATE Support SET state = ?, answer = ? WHERE id = ?",
                    (1, data['answer'], id))


def delete_support(id):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞

    :param id: id –∑–∞–ø—Ä–æ—Å–∞
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("DELETE FROM Support WHERE id = ?", [id])


# # # –ü—Ä–æ—á–µ–µ # # #

def get_param(key):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ –∫–ª—é—á—É

    :param key: –∫–ª—é—á
    :return: –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞
    """
    with connect_db() as db:
        cur = db.cursor()
        return cur.execute("SELECT * FROM Params WHERE key = ?", [key]).fetchone()[1]


def set_param(key, value):
    """
    –ó–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É

    :param key: –∫–ª—é—á
    :param value: –∑–Ω–∞—á–µ–Ω–∏–µ
    :return:
    """
    with connect_db() as db:
        cur = db.cursor()
        cur.execute("UPDATE Params SET value = ? WHERE key = ?", (value, key))
