import json

from aiogram import types
from aiogram.dispatcher.filters import Regexp

import database
from handlers.message.user_message import shop_message
from loader import dp
from bin.purchase.purchase import select_count
from bin import keyboards
from src.const import const_ru
from bin.keyboards import create_list_keyboard

# # # –¢–æ–≤–∞—Ä—ã # # #

@dp.callback_query_handler(Regexp("all_category"))
async def all_category(call: types.CallbackQuery):
    """
    –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ shop_message() –∏–∑ user_message

    :param call:
    :return:
    """
    await call.message.delete()
    await shop_message(call.message)


@dp.callback_query_handler(Regexp("select_category"))
async def select_category(call: types.CallbackQuery):
    """
    –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param call:
    :return:
    """
    await call.message.delete()

    data = call.data.split("=")
    keyboard = keyboards.create_category_items_keyboard(data[1], "select_subcategory", "select_item")
    length = len(json.loads(keyboard.as_json())["inline_keyboard"])

    message_text = "üõí –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    if length == 0:
        message_text = const_ru["nothing"]

    keyboard.add(types.InlineKeyboardButton(text=const_ru["back"],
                                            callback_data="all_category"))
    keyboard.add(keyboards.CLOSE_BTN)
    await call.message.answer(message_text, reply_markup=keyboard)


@dp.callback_query_handler(Regexp("select_subcategory"))
async def select_subcategory(call: types.CallbackQuery):
    """
    –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    :param call:
    :return:
    """
    await call.message.delete()

    data = call.data.split("=")[1].split("|")
    keyboard = keyboards.create_subcategory_items_keyboard(data[0], data[1], "select_item")
    length = len(json.loads(keyboard.as_json())["inline_keyboard"])

    message_text = "üõí –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"
    if length == 0:
        message_text = const_ru["nothing"]

    keyboard.row(types.InlineKeyboardButton(text=const_ru["back"],
                                            callback_data=f"select_category={data[0]}"),
                 types.InlineKeyboardButton(text=const_ru["to_all_category"],
                                            callback_data="all_category"))
    keyboard.add(keyboards.CLOSE_BTN)

    await call.message.answer(message_text, reply_markup=keyboard)


@dp.callback_query_handler(Regexp("select_item"))
async def select_item(call: types.CallbackQuery):
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ

    :param call:
    :return:
    """
    await call.message.delete()
    data = call.data.split("=")

    item = database.get_item(data[1])
    item_count = database.get_item_count(data[1])

    message_text = f"üìì –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{item[1]}</b>\n" \
                   f"üìã –û–ø–∏—Å–∞–Ω–∏–µ:\n{item[2]}\n" \
                   f"üí≥ –¶–µ–Ω–∞: {item[4]} —Ä—É–±.\n\n" \
                   f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø–æ–∫—É–ø–∫–µ: <i>{item_count} —à—Ç.</i>"

    keyboard = types.InlineKeyboardMarkup()

    if item_count > 0:
        keyboard.add(types.InlineKeyboardButton(text=const_ru["buy"],
                                                callback_data=f"buy_item={data[1]}"))
    else:
        message_text += "\n\n <b>‚ùóÔ∏è Ô∏è –¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—ÇÔ∏èÔ∏è</b>"

    if item[6] == 0:
        back_callback = f"select_category={item[5]}"
    else:
        back_callback = f"select_subcategory={item[5]}|{item[6]}"

    keyboard.row(types.InlineKeyboardButton(text=const_ru["back"],
                                            callback_data=back_callback),
                 types.InlineKeyboardButton(text=const_ru["to_all_category"],
                                            callback_data="all_category"))

    keyboard.add(keyboards.CLOSE_BTN)
    if item[3] != "":
        await call.message.answer_photo(open(item[3], "rb"), message_text, reply_markup=keyboard)
    else:
        await call.message.answer(message_text, reply_markup=keyboard)


@dp.callback_query_handler(Regexp("buy_item"))
async def buy_item(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞

    :param call:
    :return:
    """
    await call.message.delete()
    data = call.data.split("=")

    await select_count(call.message, data[1])


# # # –û–±—Ä–∞—â–µ–Ω–∏—è # # #

@dp.callback_query_handler(Regexp("get_user_supports"))
async def get_user_supports(call: types.CallbackQuery):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param call:
    :return:
    """
    await call.message.delete()
    call_data = call.data.split("=")
    data = call_data[1].split("|")
    keyboard = create_list_keyboard(data=database.get_user_supports(data[0]),
                                    last_index=int(data[1]),
                                    page_click=f"get_user_supports={data[0]}",
                                    btn_text_param="user_support",
                                    btn_click="get_user_support")

    await call.message.answer(const_ru["get_supports"], reply_markup=keyboard)


@dp.callback_query_handler(Regexp("get_user_support"))
async def get_support(call: types.CallbackQuery):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ—è

    :param call:
    :return:
    """
    await call.message.delete()
    call_data = call.data.split("=")
    support_data = database.get_support(call_data[1])

    keyboard = types.InlineKeyboardMarkup()

    if int(support_data[5]) == 0:
        support_state = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ"
    else:
        support_state = "‚ùå –ó–∞–∫—Ä—ã—Ç–æ\n" \
                        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                        f"üìß –û—Ç–≤–µ—Ç:\n\n" \
                        f"{support_data[6]}"

    message_text = f"üÜî –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: <b>{call_data[1]}</b>\n" \
                   "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"üìó –¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞: <b>{database.get_support_type(support_data[4])[1]}</b>\n" \
                   f"üìã –û–ø–∏—Å–∞–Ω–∏–µ:\n{support_data[3]}\n" \
                   "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ: {support_state}"

    keyboard.add(keyboards.CLOSE_BTN)
    await call.message.answer(message_text, reply_markup=keyboard)
