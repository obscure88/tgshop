from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

import database
from loader import dp
from bin.items.item_loader import add_data
from src import config
from src.const import is_const
from bin.keyboards import cancel_keyboard


class ItemCreator(StatesGroup):
    item_name = State()
    item_desc = State()
    item_pic = State()
    item_price = State()

    item_data = State()


async def add_name(message: types.Message, category_data):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

    :param message:
    :param category_data: –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    :return:
    """
    await message.answer("üìô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=cancel_keyboard)
    await ItemCreator.item_name.set()

    data = category_data.split("|")

    state = Dispatcher.get_current().current_state()
    await state.update_data(category=data[0])
    await state.update_data(subcategory=data[1])


@dp.message_handler(state=ItemCreator.item_name)
async def add_desc(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ state

    :param message:
    :param state:
    :return:
    """
    item_name = message.text
    if is_const(item_name):
        await message.answer("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return

    await state.update_data(name=item_name)
    await ItemCreator.next()
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")


@dp.message_handler(state=ItemCreator.item_desc)
async def add_pic(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ state

    :param message:
    :param state:
    :return:
    """
    item_desc = message.text
    if is_const(item_desc):
        await message.answer("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return

    await state.update_data(desc=item_desc)
    await ItemCreator.next()
    await message.answer("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ <i>–ª—é–±–æ–π —Ç–µ–∫—Å—Ç</i>")


@dp.message_handler(state=ItemCreator.item_pic, content_types=['photo', 'text'])
async def add_price(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ state

    :param message:
    :param state:
    :return:
    """
    item_pic = ""

    if len(message.photo) > 0:
        src = "items"
        config.create_folder(src)
        item_data = await state.get_data()
        item_name = item_data["name"]
        item_pic = f"{src}/{item_name}"
        await message.photo[-1].download(item_pic)

    await state.update_data(pic=item_pic)

    await ItemCreator.next()
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö")


@dp.message_handler(state=ItemCreator.item_price)
async def check_price(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
    –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞

    :param message:
    :param state:
    :return:
    """
    if not message.text.isdigit():
        await message.answer("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return

    await state.update_data(price=int(message.text))
    item_data = await state.get_data()

    await state.finish()

    item_name = item_data["name"]
    item = database.add_item(item_data)

    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä <b>{item_name}</b> —Å–æ–∑–¥–∞–Ω")

    item_id = item[0]
    await add_data(message, item_id)
