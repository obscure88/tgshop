from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Regexp
from aiogram.dispatcher.filters.state import StatesGroup, State

import database
from loader import dp
from bin.admins import send_admins
from src.const import const_ru, is_const
from bin.strings import get_user_link


class UserSupport(StatesGroup):
    support_type = State()
    support_message = State()


async def select_type(message: types.Message):
    """
    –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è

    :param message:
    :return:
    """
    await UserSupport.support_type.set()

    support_list = database.get_support_types()
    keyboard = types.InlineKeyboardMarkup()

    for i in range(len(support_list)):
        keyboard.add(types.InlineKeyboardButton(text=support_list[i][1],
                                                callback_data=f"support_type={support_list[i][0]}"))
    keyboard.add(types.InlineKeyboardButton(text=const_ru["cancel_support"],
                                            callback_data="cancel_support"))

    await message.answer("üë®‚Äçüíª –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∞", reply_markup=keyboard)


@dp.callback_query_handler(Regexp("support_type"), state=UserSupport.support_type)
async def input_message(call: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è

    :param call:
    :return:
    """
    await call.message.delete()
    call_data = call.data.split("=")

    state = Dispatcher.get_current().current_state()
    await state.update_data(user_id=call.message.chat.id)
    await state.update_data(username=call.message.chat.username)
    await state.update_data(type=call_data[1])
    await UserSupport.next()

    await call.message.answer("üìã –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É/–≤–æ–ø—Ä–æ—Å")


@dp.message_handler(state=UserSupport.support_message)
async def send_support(message: types.Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞

    :param message:
    :param state:
    :return:
    """
    message_text = message.html_text
    if is_const(message.text):
        await message.answer("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return

    await state.update_data(message=message_text)
    data = await state.get_data()
    await state.finish()

    support_id = database.register_support(data)

    user_message = "‚úîÔ∏è –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n\n" \
                   f"üÜî –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: {support_id}"

    admin_message = "üë®‚Äçüíª –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n" \
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                    f"üÜî –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: <b>{support_id}</b>\n" \
                    f"üôç‚Äç‚ôÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_user_link(message.chat.id)}\n" \
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                    f"üìó –¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞: <b>{database.get_support_type(data['type'])[1]}</b>\n" \
                    f"üìã –û–ø–∏—Å–∞–Ω–∏–µ:\n\n{data['message']}"

    await message.answer(user_message)
    await send_admins(admin_message)

    await state.finish()


@dp.callback_query_handler(Regexp("cancel_support"), state=UserSupport)
async def cancel_support(call: types.CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è

    :param call:
    :return:
    """
    await call.message.delete()
    state = Dispatcher.get_current().current_state()
    await call.message.answer("‚ùóÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.finish()
